- hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
  - var_files/{{ lookup('env','AWS_ACCOUNT_NAME') }}-account.yml
  - var_files/gameday.yml
  vars:
    key_name: KeyPair1
    instance_type: t2.micro
    security_group: BatchProcessing-justin
    instance_profile_name: BatchProcessing-justin
    image: ami-4985b048
    master_image_name: master-image
    region: ap-northeast-1 # "{{ region }}"
  tasks:
  - name: Find existing key pair
    local_action:
        shell aws --region ap-northeast-1 ec2 describe-key-pairs | scripts/find_keypair.py {{key_name}}
    register: master_keypair_exists

  - name: Wipe key pair
    local_action:
      shell aws --region {{region}} ec2 delete-key-pair --key-name {{appname}}-batchprocessing 
    when: master_keypair_exists

  - name: Find existing master image
    local_action:
        shell aws --region ap-northeast-1 ec2 describe-images --filters Name=name,Values=master-image | scripts/find_image.py {{master_image_name}}
    register: existing_master_image_id
  - debug: var=existing_master_image_id

  - name: Wipe master image
    local_action:
      shell aws --region {{region}} ec2 deregister-image --image-id {{existing_master_image_id.stdout}}
    when: existing_master_image_id.stdout|length > 0
  
  - name: Create key pair for master instance
    local_action:
        shell aws --region {{region}} ec2 create-key-pair --key-name {{appname}}-batchprocessing | python -c "import json;import sys;print json.load(sys.stdin)['KeyMaterial']" > {{appname}}-batchprocessing.pem

#  - name: Finding all master instances
#    local_action:
#        shell aws --region {{region}} ec2 describe-instances --filters Name=tag:Name,Values=Master | scripts/running_instances.py
#    register: running_master_instances
#  - debug: var=running_master_instances
#
#  - name: Stopping all master instances
#    local_action:
#        shell aws --region {{region}} ec2 terminate-instances --instance-ids {{item}}
#    with_items: running_master_instances.stdout|fromjson
#    #when: ${{running_master_instances.stdout|fromjson}} | length > 0

  - name: Create Master Instance
    register: master_instance
    local_action:
      module: ec2
      key_name: "{{appname}}-batchprocessing"
      instance_type: "{{ instance_type }}"
      image: "{{ image }}"
      wait: yes
      #group: webserver
      user_data: "{{ lookup('file', 'var_files/master_image_userdata.txt') }}"
      instance_profile_name: "{{ instance_profile_name }}"
      group: "{{ security_group }}"
      instance_tags:
        Name: Master
      count: 1
      region: "{{ region }}"
  - debug: var=master_instance.instances
  
  - name: Create Master AMI
    register: master_image
    local_action:
      module: ec2_ami
      description: "master worker image"
      instance_id: "{{ master_instance.instances[0].id }}"
      wait: yes
      name: "{{master_image_name}}"
      region: "{{ region }}"
  - debug: var=master_image

  - name: Terminate master instance
    local_action:
        shell aws --region {{region}} ec2 terminate-instances --instance-ids {{master_instance.instances[0].id}}

